package wozekwidlowy;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.RepaintManager;
import javax.swing.ToolTipManager;

/**
 *
 * @author RasGrass
 */
public class Forklift extends Canvas {

    private JPanel panel;
    private AddingForm form = new AddingForm();
    private boolean isRunning = true;
    private static Storehouse magazyn = new Storehouse();
    private ButtonPanel buttonPanel = new ButtonPanel();
    private InformationPanel rightPanel;
    private TextPanel rightTextPanel = new TextPanel();
    private CommandlinePanel CommandField = new CommandlinePanel();
    private static JPanel drawingPane = new JPanel();
    private ItemListPanel itemPanel;
    private BufferedImage panelBackground;
    private boolean rightPressed, leftPressed = false;
    private static long delta;
    RepaintManager myRepaintManager;
    private static long lastLoopTime = System.currentTimeMillis();
    private ActionListener panelAction = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent event) {
            if ("ESC".equals(event.getActionCommand())) {
                isRunning = false;
                System.exit(0);
            }
            if ("LEFT".equals(event.getActionCommand())) {
                forklift.moveLeft(delta);
                //forklift.paintImmediately(forklift.getBounds());
            }
            if ("RIGHT".equals(event.getActionCommand())) {
                forklift.moveRight(delta);
            }
            if ("UP".equals(event.getActionCommand())) {
                forklift.moveUp(delta);
                //forklift.paintImmediately(forklift.getBounds());
            }
            if ("DOWN".equals(event.getActionCommand())) {
                forklift.moveDown(delta);
                //drawingPane.revalidate();
            }

            if ("released RIGHT".equals(event.getActionCommand())) {
                rightPressed = false;
            }

            if ("released LEFT".equals(event.getActionCommand())) {
                leftPressed = false;
            }
        }
    };
    private JFrame frame = new JFrame();
    private Cart forklift = new Cart();

    public static synchronized void playSound() {
        new Thread(new Runnable() {
            URL url1 = new URL("/resknob.wav");
            // The wrapper thread is unnecessary, unless it blocks on the
            // Clip finishing; see comments.

            @Override
            public void run() {
                try {
                    Clip clip = AudioSystem.getClip();
                    AudioInputStream inputStream = AudioSystem.getAudioInputStream(url1);

                    clip.open(inputStream);
                    //clip.
                    clip.start();
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
            }
        }).start();
    }

    public Forklift() {


        Runnable runner = new Runnable() {
            @Override
            public void run() {
                GraphicsDevice graphicsDevice;
                GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
                graphicsDevice = graphicsEnvironment.getDefaultScreenDevice();
                frame = new JFrame("Wozek Widlowy");
                panel = new JPanel();
                frame.setContentPane(panel);
                frame.setLayout(new BorderLayout());
                frame.setUndecorated(true);
                frame.setResizable(false);
                panel.setBackground(Color.GRAY);
                rightPanel = new InformationPanel();
                panel.registerKeyboardAction(panelAction, "ESC", KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false), JComponent.WHEN_IN_FOCUSED_WINDOW);
                rightPanel.setLayout(new BorderLayout());
                rightPanel.add(buttonPanel, BorderLayout.NORTH);
                rightPanel.add(rightTextPanel, BorderLayout.CENTER);
                rightPanel.add(CommandField, BorderLayout.SOUTH);
                panel.add(rightPanel, BorderLayout.EAST);
                panel.add(drawingPane);
                drawingPane.setBackground(Color.LIGHT_GRAY);
                forklift.setToolTipText("Wozek");
                //forklift.getToolTipText(null);
                drawingPane.add(forklift);
                //drawingPane.setIgnoreRepaint(isRunning);
                panel.registerKeyboardAction(panelAction, "LEFT", KeyStroke.getKeyStroke("LEFT"), JComponent.WHEN_IN_FOCUSED_WINDOW);
                panel.registerKeyboardAction(panelAction, "RIGHT", KeyStroke.getKeyStroke("RIGHT"), JComponent.WHEN_IN_FOCUSED_WINDOW);
                panel.registerKeyboardAction(panelAction, "released LEFT", KeyStroke.getKeyStroke("released LEFT"), JComponent.WHEN_IN_FOCUSED_WINDOW);
                panel.registerKeyboardAction(panelAction, "released RIGHT", KeyStroke.getKeyStroke("released RIGHT"), JComponent.WHEN_IN_FOCUSED_WINDOW);
                panel.registerKeyboardAction(panelAction, "UP", KeyStroke.getKeyStroke("UP"), JComponent.WHEN_IN_FOCUSED_WINDOW);
                panel.registerKeyboardAction(panelAction, "DOWN", KeyStroke.getKeyStroke("DOWN"), JComponent.WHEN_IN_FOCUSED_WINDOW);
                drawingPane.add(Storehouse.racks[0]);
                drawingPane.add(Storehouse.racks[1]);
                drawingPane.add(Storehouse.racks[2]);
                drawingPane.add(Storehouse.racks[3]);
                drawingPane.add(Storehouse.racks[4]);

                frame.setVisible(true);
                graphicsDevice.setFullScreenWindow(frame);
                buttonPanel.setLayout(new GridLayout(1, 3, (int) (buttonPanel.getWidth() * 0.15), 0));
                CommandField.requestFocus();
                panel.setFocusable(true);
                rightTextPanel.addInfo("1. Dodaj obiekt");
                buttonPanel.dodajObiekt.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        rightPanel.removeAll();
                        rightPanel.add(buttonPanel, BorderLayout.NORTH);
                        rightPanel.add(CommandField, BorderLayout.SOUTH);
                        rightPanel.add(new AddingForm(), BorderLayout.CENTER);
                        rightPanel.revalidate();

                    }
                ;

                });
                
                buttonPanel.Pomoc.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        rightPanel.removeAll();
                        rightPanel.add(buttonPanel, BorderLayout.NORTH);
                        rightPanel.add(CommandField, BorderLayout.SOUTH);
                        rightPanel.add(new TextPanel(), BorderLayout.CENTER);
                        rightPanel.revalidate();

                    }
                ;

                });
                
                buttonPanel.stanMagazynu.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        rightPanel.removeAll();
                        ItemListPanel objcts = new ItemListPanel();
                        rightPanel.add(buttonPanel, BorderLayout.NORTH);
                        rightPanel.add(CommandField, BorderLayout.SOUTH);
                        rightPanel.add(objcts, BorderLayout.CENTER);

                        // objcts.setVisible(true);
                        rightPanel.revalidate();
                    }
                ;

                });
           
       myRepaintManager = new RepaintManager();
<<<<<<< local
                RepaintManager.setCurrentManager(myRepaintManager);
=======
       RepaintManager.setCurrentManager(myRepaintManager);
       
       
       //drawingPane.set
//========================= tutaj przenioslem stawianie storehousa. wladowac do jakiejs metody void initStorehouse czy cos dokonac ew. zmian i wywolanie do konstruktora tutaj
       
       
       Object exampleObject = new Object ("Słoik", 12.0, "yelloW", "Kwadrat");
       Object exampleObject1 = new Object ("Skrzynia", 12.0, "BLUE", "Prostokąt");
       Object exampleObject2 = new Object ("Krzesło", 9.0, "Green", "Koło");
       Object exampleObject3 = new Object ("Opona", 3.0, "red", "Koło");
       
       magazyn.addObjectSpecifically(exampleObject,0,0);
       magazyn.addObjectSpecifically(exampleObject1,0,0);
       magazyn.addObjectSpecifically(exampleObject2,1,4);
       magazyn.addObjectSpecifically(exampleObject3,2,2);
       
      
       //dodawanie obiektów
       /*magazyn.addObject(exampleObject, 0, 1);
       magazyn.addObject(exampleObject1, 0, 1);
       magazyn.addObject(exampleObject2, 0, 1);
       magazyn.addObject(exampleObject3, 0, 1);*/
>>>>>>> other



                Object exampleObject = new Object("Słoik", 12.0, "yelloW", "Kwadrat");
                Object exampleObject1 = new Object("Skrzynia", 12.0, "BLUE", "Prostokąt");
                Object exampleObject2 = new Object("Krzesło", 9.0, "Green", "Koło");
                Object exampleObject3 = new Object("Opona", 3.0, "red", "Koło");

                magazyn.addObject(exampleObject, 0, 0);
                magazyn.addObject(exampleObject1, 0, 0);
                magazyn.addObject(exampleObject2, 1, 4);
                magazyn.addObject(exampleObject3, 2, 2);

            }
        };

        EventQueue.invokeLater(runner);



    }

    public static Storehouse getStroehouse() {
        return magazyn;
    }

    public static JPanel getDrawingPane() {
        return drawingPane;
    }

    public Forklift getForklift() {
        return this;
    }

    public void loop() {
        long looptime = System.nanoTime();
        while (isRunning) {
            long delta1 = System.nanoTime() - looptime;
            //System.out.println(delta1);
            looptime = System.nanoTime();
            RepaintManager.currentManager(drawingPane).markCompletelyDirty(drawingPane);

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException, InterruptedException {
        final Forklift wozek = new Forklift();
        wozek.loop();

    }
}
